# Generated by Django 5.1.4 on 2025-01-02 01:58

import django.db.models.deletion
import server_side_app.utils.db
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='This field indicates whether this record has been deleted(soft delete) or not.', verbose_name='Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='This field displays the date and time when this record was deleted(soft delete).', null=True, verbose_name='Deleted Datetime')),
                ('deleted_by', models.UUIDField(blank=True, help_text='This field displays who deleted(soft delete) the record.', null=True, verbose_name='Deleted By...(ID)')),
                ('deleted_by_user_agent_info', models.JSONField(blank=True, help_text='This field displays information about the user(user agent) who deleted(soft delete) this record.', null=True, verbose_name='Deleted By...(User Agent Info)')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='This field indicates when and on what date this record was created.', verbose_name='Created Datetime')),
                ('created_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field indicates who created this record.', null=True, verbose_name='Created By...(ID)')),
                ('created_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field stores information about the user(user agent) who created this field.', null=True, verbose_name='Created By...(User Agent Info)')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='This field displays the time and date this record was last updated.', verbose_name='Last Updated Datetime')),
                ('last_updated_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field displays who last updated this record.', null=True, verbose_name='Last Updated By...(ID)')),
                ('last_updated_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field displays the information of the user(user agent) who last updated this record.', null=True, verbose_name='Last Updated By...(User Agent Info)')),
                ('server_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the server side, you can save these settings in this section.', null=True, verbose_name='Server-Side Settings')),
                ('client_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the client side, you can save these settings in this section.', null=True, verbose_name='Client-Side Settings')),
                ('user_id', models.CharField(max_length=255)),
                ('follower_count', models.IntegerField(default=0)),
                ('telegram_user', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowerCount',
            fields=[
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='This field indicates whether this record has been deleted(soft delete) or not.', verbose_name='Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='This field displays the date and time when this record was deleted(soft delete).', null=True, verbose_name='Deleted Datetime')),
                ('deleted_by', models.UUIDField(blank=True, help_text='This field displays who deleted(soft delete) the record.', null=True, verbose_name='Deleted By...(ID)')),
                ('deleted_by_user_agent_info', models.JSONField(blank=True, help_text='This field displays information about the user(user agent) who deleted(soft delete) this record.', null=True, verbose_name='Deleted By...(User Agent Info)')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='This field indicates when and on what date this record was created.', verbose_name='Created Datetime')),
                ('created_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field indicates who created this record.', null=True, verbose_name='Created By...(ID)')),
                ('created_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field stores information about the user(user agent) who created this field.', null=True, verbose_name='Created By...(User Agent Info)')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='This field displays the time and date this record was last updated.', verbose_name='Last Updated Datetime')),
                ('last_updated_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field displays who last updated this record.', null=True, verbose_name='Last Updated By...(ID)')),
                ('last_updated_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field displays the information of the user(user agent) who last updated this record.', null=True, verbose_name='Last Updated By...(User Agent Info)')),
                ('server_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the server side, you can save these settings in this section.', null=True, verbose_name='Server-Side Settings')),
                ('client_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the client side, you can save these settings in this section.', null=True, verbose_name='Client-Side Settings')),
                ('followers', models.IntegerField(default=0)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server_side_app.goal')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalFollowerCount',
            fields=[
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='This field indicates whether this record has been deleted(soft delete) or not.', verbose_name='Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='This field displays the date and time when this record was deleted(soft delete).', null=True, verbose_name='Deleted Datetime')),
                ('deleted_by', models.UUIDField(blank=True, help_text='This field displays who deleted(soft delete) the record.', null=True, verbose_name='Deleted By...(ID)')),
                ('deleted_by_user_agent_info', models.JSONField(blank=True, help_text='This field displays information about the user(user agent) who deleted(soft delete) this record.', null=True, verbose_name='Deleted By...(User Agent Info)')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='This field indicates when and on what date this record was created.', verbose_name='Created Datetime')),
                ('created_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field indicates who created this record.', null=True, verbose_name='Created By...(ID)')),
                ('created_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field stores information about the user(user agent) who created this field.', null=True, verbose_name='Created By...(User Agent Info)')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='This field displays the time and date this record was last updated.', verbose_name='Last Updated Datetime')),
                ('last_updated_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field displays who last updated this record.', null=True, verbose_name='Last Updated By...(ID)')),
                ('last_updated_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field displays the information of the user(user agent) who last updated this record.', null=True, verbose_name='Last Updated By...(User Agent Info)')),
                ('server_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the server side, you can save these settings in this section.', null=True, verbose_name='Server-Side Settings')),
                ('client_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the client side, you can save these settings in this section.', null=True, verbose_name='Client-Side Settings')),
                ('followers', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('goal', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='server_side_app.goal')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical follower count',
                'verbose_name_plural': 'historical follower counts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGoal',
            fields=[
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='This field indicates whether this record has been deleted(soft delete) or not.', verbose_name='Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='This field displays the date and time when this record was deleted(soft delete).', null=True, verbose_name='Deleted Datetime')),
                ('deleted_by', models.UUIDField(blank=True, help_text='This field displays who deleted(soft delete) the record.', null=True, verbose_name='Deleted By...(ID)')),
                ('deleted_by_user_agent_info', models.JSONField(blank=True, help_text='This field displays information about the user(user agent) who deleted(soft delete) this record.', null=True, verbose_name='Deleted By...(User Agent Info)')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='This field indicates when and on what date this record was created.', verbose_name='Created Datetime')),
                ('created_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field indicates who created this record.', null=True, verbose_name='Created By...(ID)')),
                ('created_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field stores information about the user(user agent) who created this field.', null=True, verbose_name='Created By...(User Agent Info)')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='This field displays the time and date this record was last updated.', verbose_name='Last Updated Datetime')),
                ('last_updated_by', server_side_app.utils.db.UUIDFieldContinuousCommunication(blank=True, help_text='This field displays who last updated this record.', null=True, verbose_name='Last Updated By...(ID)')),
                ('last_updated_by_user_agent_info', server_side_app.utils.db.JSONFieldContinuousCommunication(blank=True, help_text='This field displays the information of the user(user agent) who last updated this record.', null=True, verbose_name='Last Updated By...(User Agent Info)')),
                ('server_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the server side, you can save these settings in this section.', null=True, verbose_name='Server-Side Settings')),
                ('client_side_settings', models.JSONField(blank=True, help_text='If you need to have specific settings for each record in this table on the client side, you can save these settings in this section.', null=True, verbose_name='Client-Side Settings')),
                ('user_id', models.CharField(max_length=255)),
                ('follower_count', models.IntegerField(default=0)),
                ('telegram_user', models.CharField(max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical goal',
                'verbose_name_plural': 'historical goals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
